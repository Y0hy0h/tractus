WHITESPACE = _{ " " | "\t" }
file = { SOI ~ statement ~ ((";" ~ NEWLINE | ";" | NEWLINE) ~ statement?)* ~ EOI }
statement = { (assignment | library | expression)? ~ comment? }

assignment = { expression ~ ("<-" | "=") ~ expression}
comment = @{ "#" ~ character* }
character = _{ !NEWLINE ~ ANY }
empty = @{ "" }

// Take care to prevent left recursion. See https://math.stackexchange.com/a/140049
expression = ${ non_recursive ~ ( infix | indexing )* }
non_recursive = _{ function_definition | function_call | formula | constant | identifier }
indexing = _{ (column | index) }
column = !{ "$" ~ identifier }
index = !{ "[" ~ (expression | empty) ~ ("," ~ (expression | empty))* ~ "]" }
infix = !{ WHITESPACE* ~ infix_operator ~ expression }
infix_operator = { "<" | "<=" | ">" | ">=" | "==" | "!=" | "+" | "-" | "*" | "/" | "^" | "&&" | "||" | custom_infix_operator }
custom_infix_operator = { "%" ~ (!("%" | WHITESPACE | NEWLINE) ~ ANY)* ~ "%" }

identifier = @{ !(ASCII_DIGIT | "_" | "." ~ ASCII_DIGIT) ~ identifier_character+ }
identifier_character = _{ ASCII_ALPHANUMERIC | "." | "_" }

constant = ${ number | string | ^"TRUE" | ^"FALSE" }
number = @{ ASCII_DIGIT+ }
string = @{ "\"" ~ ( "\\\"" | !"\"" ~ ANY )* ~ "\"" | "'" ~ ( "\\'" | !"'" ~ ANY )* ~ "'"}

function_definition = !{ "function" ~ "(" ~ parameters ~ ")" ~ expression }
parameters = { parameter? ~ ("," ~ parameter)* }
parameter = _{ parameter_with_default | required_parameter }
required_parameter = { identifier }
parameter_with_default = { identifier ~ "=" ~ expression }

function_call = !{ identifier ~ "(" ~ arguments ~ ")" }
arguments = { argument? ~ ("," ~ argument)* }
argument = _{ named_argument | unnamed_argument }
named_argument = { identifier ~ "=" ~ expression }
unnamed_argument = { expression }

library = { "library(" ~ identifier ~ ")"}

formula = !{ one_sided | two_sided }
one_sided = { "~" ~ formula_right_side }
two_sided = { identifier? ~ "~" ~ formula_right_side }
formula_right_side = _{ identifier ~ (formula_operator ~ identifier)* }
formula_operator = { "+" }