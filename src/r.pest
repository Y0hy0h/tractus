WHITESPACE = _{ " " | "\t" }
file = _{ SOI ~ lines ~ EOI }
lines = _{ (line ~ line_separator | empty ~ NEWLINE )* ~ (line ~ ";"?)? }
line_separator = _{ ";" ~ NEWLINE | ";" | NEWLINE }
line = { statement ~ comment | statement | comment }
statement = { assignment | if_statement | while_statement | for_statement | library | expression }

assignment = { (expression ~ ("<-" | "=") ~ NEWLINE*)+ ~ expression}
if_statement = { "if" ~ "(" ~ expression ~ ")" ~ block ~ (NEWLINE* ~ "else" ~ block)? }
while_statement = { "while" ~ "(" ~ expression ~ ")" ~ block }
for_statement = { "for" ~ "(" ~ expression ~ "in" ~ expression ~ ")" ~ block }
block = { NEWLINE* ~ ("{" ~ NEWLINE* ~ lines ~ NEWLINE* ~ "}" | "(" ~ NEWLINE* ~ line ~ NEWLINE* ~ ")" | line) }

comment = @{ "#" ~ character* }
character = _{ !NEWLINE ~ ANY }
empty = @{ "" }

// Take care to prevent left recursion. See https://math.stackexchange.com/a/140049
expression = { ("(" ~ expression ~ ")" | non_recursive) ~ recursive*}
non_recursive = _{ function_definition | prefix | formula | constant | identifier }
recursive = _{ infix | indexing | formula | function_call }
indexing = _{ (column | index | list_index) }
column = { "$" ~ identifier }
index = { "[" ~ (expression | empty) ~ ("," ~ (expression | empty))* ~ "]" }
list_index = { "[[" ~ (expression | empty) ~ ("," ~ (expression | empty))* ~ "]]" }
prefix = { prefix_character ~ expression }
prefix_character = { "!" | "-" | "+" }
infix = { infix_operator ~ NEWLINE* ~ expression }
infix_operator = { "<=" | ">=" | !"<-" ~ "<" | ">" | "==" | "!=" | "+" | "-" | "*" | "/" | "^" | "&&" | "||" | "&" | "|" | ":" | custom_infix_operator }
custom_infix_operator = { "%" ~ (!("%" | WHITESPACE | NEWLINE) ~ ANY)* ~ "%" }

identifier = @{ "\"" ~ raw_identifier ~ "\"" | raw_identifier }
raw_identifier = _{ !(ASCII_DIGIT | "_" | "." ~ ASCII_DIGIT) ~ identifier_character+ ~ ("::" ~ ":"* ~ identifier)? }
identifier_character = _{ ASCII_ALPHANUMERIC | "." | "_" }

constant = ${ number | string | "TRUE" | "FALSE" }
number = @{ (ASCII_DIGIT* ~ ".")? ~ ASCII_DIGIT+ ~ ("e" ~ ("+" | "-") ~ ASCII_DIGIT+)? }
string = @{ "\"" ~ ("\\\"" | !"\"" ~ ANY)* ~ "\"" | "'" ~ ("\\'" | !"'" ~ ANY)* ~ "'" | "`" ~ ("\\`" | !"`" ~ ANY)* ~ "`" }

function_definition = { "function" ~ "(" ~ NEWLINE* ~ parameters ~ NEWLINE* ~ ")" ~ block }
parameters = { parameter? ~ (NEWLINE* ~ "," ~ NEWLINE* ~ parameter)* }
parameter = _{ parameter_with_default | required_parameter }
required_parameter = { identifier }
parameter_with_default = { identifier ~ "=" ~ expression }

function_call = { "(" ~ NEWLINE* ~ arguments ~ NEWLINE* ~ ")" }
arguments = { argument? ~ (NEWLINE* ~ "," ~ NEWLINE* ~ argument)* }
argument = _{ named_argument | unnamed_argument }
named_argument = { identifier ~ "=" ~ expression }
unnamed_argument = { expression }

library = { "library(" ~ identifier ~ ")"}

formula = { "~" ~ formula_right_side }
formula_right_side = _{ expression ~ (infix_operator ~ expression)* }